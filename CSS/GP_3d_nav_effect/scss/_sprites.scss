/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$btn-arrow-name: 'btn_arrow';
$btn-arrow-x: 0px;
$btn-arrow-y: 28px;
$btn-arrow-offset-x: 0px;
$btn-arrow-offset-y: -28px;
$btn-arrow-width: 7px;
$btn-arrow-height: 14px;
$btn-arrow-total-width: 58px;
$btn-arrow-total-height: 42px;
$btn-arrow-image: '../img/sprite.png';
$btn-arrow: (0px, 28px, 0px, -28px, 7px, 14px, 58px, 42px, '../img/sprite.png', 'btn_arrow', );
$carousel-next-name: 'carousel_next';
$carousel-next-x: 9px;
$carousel-next-y: 28px;
$carousel-next-offset-x: -9px;
$carousel-next-offset-y: -28px;
$carousel-next-width: 7px;
$carousel-next-height: 12px;
$carousel-next-total-width: 58px;
$carousel-next-total-height: 42px;
$carousel-next-image: '../img/sprite.png';
$carousel-next: (9px, 28px, -9px, -28px, 7px, 12px, 58px, 42px, '../img/sprite.png', 'carousel_next', );
$carousel-prev-name: 'carousel_prev';
$carousel-prev-x: 18px;
$carousel-prev-y: 28px;
$carousel-prev-offset-x: -18px;
$carousel-prev-offset-y: -28px;
$carousel-prev-width: 7px;
$carousel-prev-height: 12px;
$carousel-prev-total-width: 58px;
$carousel-prev-total-height: 42px;
$carousel-prev-image: '../img/sprite.png';
$carousel-prev: (18px, 28px, -18px, -28px, 7px, 12px, 58px, 42px, '../img/sprite.png', 'carousel_prev', );
$slider-next-name: 'slider_next';
$slider-next-x: 0px;
$slider-next-y: 0px;
$slider-next-offset-x: 0px;
$slider-next-offset-y: 0px;
$slider-next-width: 15px;
$slider-next-height: 26px;
$slider-next-total-width: 58px;
$slider-next-total-height: 42px;
$slider-next-image: '../img/sprite.png';
$slider-next: (0px, 0px, 0px, 0px, 15px, 26px, 58px, 42px, '../img/sprite.png', 'slider_next', );
$slider-prev-name: 'slider_prev';
$slider-prev-x: 17px;
$slider-prev-y: 0px;
$slider-prev-offset-x: -17px;
$slider-prev-offset-y: 0px;
$slider-prev-width: 15px;
$slider-prev-height: 26px;
$slider-prev-total-width: 58px;
$slider-prev-total-height: 42px;
$slider-prev-image: '../img/sprite.png';
$slider-prev: (17px, 0px, -17px, 0px, 15px, 26px, 58px, 42px, '../img/sprite.png', 'slider_prev', );
$zz-name: 'zz';
$zz-x: 34px;
$zz-y: 0px;
$zz-offset-x: -34px;
$zz-offset-y: 0px;
$zz-width: 24px;
$zz-height: 14px;
$zz-total-width: 58px;
$zz-total-height: 42px;
$zz-image: '../img/sprite.png';
$zz: (34px, 0px, -34px, 0px, 24px, 14px, 58px, 42px, '../img/sprite.png', 'zz', );
$spritesheet-width: 58px;
$spritesheet-height: 42px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($btn-arrow, $carousel-next, $carousel-prev, $slider-next, $slider-prev, $zz, );
$spritesheet: (58px, 42px, '../img/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
